-- File: sumbits.tmp
-- Generated by MyHDL 1.0dev
-- Date: Thu Nov 26 14:50:31 2015


library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use std.textio.all;

use work.pck_myhdl_10.all;

entity sumbits is
    port (
        Clk: in std_logic;
        D  : in unsigned(16 downto 0);
        Q  : out unsigned(4 downto 0)
        );
end entity sumbits;
-- a recursive pipelined implementation

architecture MyHDL of sumbits is






    signal dlower                : unsigned(8 downto 0);
    signal dupper                : unsigned(8 downto 0);
    signal lql                   : unsigned(3 downto 0);
    signal lqu                   : unsigned(3 downto 0);
    signal sbs0_dlower           : unsigned(4 downto 0);
    signal sbs0_dupper           : unsigned(4 downto 0);
    signal sbs0_lql              : unsigned(2 downto 0);
    signal sbs0_lqu              : unsigned(2 downto 0);
    signal sbs0_sbs0_dlower      : unsigned(2 downto 0);
    signal sbs0_sbs0_dupper      : unsigned(2 downto 0);
    signal sbs0_sbs0_lql         : unsigned(1 downto 0);
    signal sbs0_sbs0_lqu         : unsigned(1 downto 0);
    signal sbs0_sbs0_sbs0_dlower : unsigned(1 downto 0);
    signal sbs0_sbs0_sbs0_dupper : unsigned(1 downto 0);
    signal sbs0_sbs0_sbs0_lql    : unsigned(1 downto 0);
    signal sbs0_sbs0_sbs0_lqu    : unsigned(1 downto 0);
    signal sbs0_sbs0_sbs1_dlower : unsigned(1 downto 0);
    signal sbs0_sbs0_sbs1_dupper : unsigned(1 downto 0);
    signal sbs0_sbs0_sbs1_lql    : unsigned(1 downto 0);
    signal sbs0_sbs0_sbs1_lqu    : unsigned(1 downto 0);
    signal sbs0_sbs1_dlower      : unsigned(2 downto 0);
    signal sbs0_sbs1_dupper      : unsigned(2 downto 0);
    signal sbs0_sbs1_lql         : unsigned(1 downto 0);
    signal sbs0_sbs1_lqu         : unsigned(1 downto 0);
    signal sbs0_sbs1_sbs0_dlower : unsigned(1 downto 0);
    signal sbs0_sbs1_sbs0_dupper : unsigned(1 downto 0);
    signal sbs0_sbs1_sbs0_lql    : unsigned(1 downto 0);
    signal sbs0_sbs1_sbs0_lqu    : unsigned(1 downto 0);
    signal sbs0_sbs1_sbs1_dlower : unsigned(1 downto 0);
    signal sbs0_sbs1_sbs1_dupper : unsigned(1 downto 0);
    signal sbs0_sbs1_sbs1_lql    : unsigned(1 downto 0);
    signal sbs0_sbs1_sbs1_lqu    : unsigned(1 downto 0);
    signal sbs1_dlower           : unsigned(4 downto 0);
    signal sbs1_dupper           : unsigned(4 downto 0);
    signal sbs1_lql              : unsigned(2 downto 0);
    signal sbs1_lqu              : unsigned(2 downto 0);
    signal sbs1_sbs0_dlower      : unsigned(2 downto 0);
    signal sbs1_sbs0_dupper      : unsigned(2 downto 0);
    signal sbs1_sbs0_lql         : unsigned(1 downto 0);
    signal sbs1_sbs0_lqu         : unsigned(1 downto 0);
    signal sbs1_sbs0_sbs0_dlower : unsigned(1 downto 0);
    signal sbs1_sbs0_sbs0_dupper : unsigned(1 downto 0);
    signal sbs1_sbs0_sbs0_lql    : unsigned(1 downto 0);
    signal sbs1_sbs0_sbs0_lqu    : unsigned(1 downto 0);
    signal sbs1_sbs0_sbs1_dlower : unsigned(1 downto 0);
    signal sbs1_sbs0_sbs1_dupper : unsigned(1 downto 0);
    signal sbs1_sbs0_sbs1_lql    : unsigned(1 downto 0);
    signal sbs1_sbs0_sbs1_lqu    : unsigned(1 downto 0);
    signal sbs1_sbs1_dlower      : unsigned(2 downto 0);
    signal sbs1_sbs1_dupper      : unsigned(2 downto 0);
    signal sbs1_sbs1_lql         : unsigned(1 downto 0);
    signal sbs1_sbs1_lqu         : unsigned(1 downto 0);
    signal sbs1_sbs1_sbs0_dlower : unsigned(1 downto 0);
    signal sbs1_sbs1_sbs0_dupper : unsigned(1 downto 0);
    signal sbs1_sbs1_sbs0_lql    : unsigned(1 downto 0);
    signal sbs1_sbs1_sbs0_lqu    : unsigned(1 downto 0);
    signal sbs1_sbs1_sbs1_dlower : unsigned(1 downto 0);
    signal sbs1_sbs1_sbs1_dupper : unsigned(1 downto 0);
    signal sbs1_sbs1_sbs1_lql    : unsigned(1 downto 0);
    signal sbs1_sbs1_sbs1_lqu    : unsigned(1 downto 0);

begin




-- the result is the sum of the two (terminal) leaves 
    sumbits_sbs0_sbs0_sbs0_sbs0_rtl2: process (Clk) is
        begin
            if rising_edge(Clk) then
                sbs0_sbs0_sbs0_lqu <= (to_unsigned(sbs0_sbs0_sbs0_dupper(1), 2) + to_unsigned(sbs0_sbs0_sbs0_dupper(0), 2));
            end if;
        end process sumbits_sbs0_sbs0_sbs0_sbs0_rtl2;

    -- the result is the sum of the two (terminal) leaves 
    sumbits_sbs0_sbs0_sbs0_sbs1_rtl2: process (Clk) is
        begin
            if rising_edge(Clk) then
                sbs0_sbs0_sbs0_lql <= (to_unsigned(sbs0_sbs0_sbs0_dlower(1), 2) + to_unsigned(sbs0_sbs0_sbs0_dlower(0), 2));
            end if;
        end process sumbits_sbs0_sbs0_sbs0_sbs1_rtl2;

    -- this will expand on the left in case the input data-size is uneven 
    
    sbs0_sbs0_sbs0_dupper <= resize(sbs0_sbs0_dupper(3-1 downto 2), 2);
    sbs0_sbs0_sbs0_dlower <= sbs0_sbs0_dupper(2-1 downto 0);

    -- the result is the sum of the previous branches 
    sumbits_sbs0_sbs0_sbs0_rtlr: process (Clk) is
        begin
            if rising_edge(Clk) then
                sbs0_sbs0_lqu <= (sbs0_sbs0_sbs0_lqu + sbs0_sbs0_sbs0_lql);
            end if;
        end process sumbits_sbs0_sbs0_sbs0_rtlr;

    -- the result is the sum of the two (terminal) leaves 
    sumbits_sbs0_sbs0_sbs1_sbs0_rtl2: process (Clk) is
        begin
            if rising_edge(Clk) then
                sbs0_sbs0_sbs1_lqu <= (to_unsigned(sbs0_sbs0_sbs1_dupper(1), 2) + to_unsigned(sbs0_sbs0_sbs1_dupper(0), 2));
            end if;
        end process sumbits_sbs0_sbs0_sbs1_sbs0_rtl2;

    -- the result is the sum of the two (terminal) leaves 
    sumbits_sbs0_sbs0_sbs1_sbs1_rtl2: process (Clk) is
        begin
            if rising_edge(Clk) then
                sbs0_sbs0_sbs1_lql <= (to_unsigned(sbs0_sbs0_sbs1_dlower(1), 2) + to_unsigned(sbs0_sbs0_sbs1_dlower(0), 2));
            end if;
        end process sumbits_sbs0_sbs0_sbs1_sbs1_rtl2;

    -- this will expand on the left in case the input data-size is uneven 
    
    sbs0_sbs0_sbs1_dupper <= resize(sbs0_sbs0_dlower(3-1 downto 2), 2);
    sbs0_sbs0_sbs1_dlower <= sbs0_sbs0_dlower(2-1 downto 0);

    -- the result is the sum of the previous branches 
    sumbits_sbs0_sbs0_sbs1_rtlr: process (Clk) is
        begin
            if rising_edge(Clk) then
                sbs0_sbs0_lql <= (sbs0_sbs0_sbs1_lqu + sbs0_sbs0_sbs1_lql);
            end if;
        end process sumbits_sbs0_sbs0_sbs1_rtlr;

    -- this will expand on the left in case the input data-size is uneven 
    
    sbs0_sbs0_dupper <= resize(sbs0_dupper(5-1 downto 3), 3);
    sbs0_sbs0_dlower <= sbs0_dupper(3-1 downto 0);

    -- the result is the sum of the previous branches 
    sumbits_sbs0_sbs0_rtlr: process (Clk) is
        begin
            if rising_edge(Clk) then
                sbs0_lqu <= (resize(sbs0_sbs0_lqu, 3) + sbs0_sbs0_lql);
            end if;
        end process sumbits_sbs0_sbs0_rtlr;

    -- the result is the sum of the two (terminal) leaves 
    sumbits_sbs0_sbs1_sbs0_sbs0_rtl2: process (Clk) is
        begin
            if rising_edge(Clk) then
                sbs0_sbs1_sbs0_lqu <= (to_unsigned(sbs0_sbs1_sbs0_dupper(1), 2) + to_unsigned(sbs0_sbs1_sbs0_dupper(0), 2));
            end if;
        end process sumbits_sbs0_sbs1_sbs0_sbs0_rtl2;

    -- the result is the sum of the two (terminal) leaves 
    sumbits_sbs0_sbs1_sbs0_sbs1_rtl2: process (Clk) is
        begin
            if rising_edge(Clk) then
                sbs0_sbs1_sbs0_lql <= (to_unsigned(sbs0_sbs1_sbs0_dlower(1), 2) + to_unsigned(sbs0_sbs1_sbs0_dlower(0), 2));
            end if;
        end process sumbits_sbs0_sbs1_sbs0_sbs1_rtl2;

    -- this will expand on the left in case the input data-size is uneven 
    
    sbs0_sbs1_sbs0_dupper <= resize(sbs0_sbs1_dupper(3-1 downto 2), 2);
    sbs0_sbs1_sbs0_dlower <= sbs0_sbs1_dupper(2-1 downto 0);

    -- the result is the sum of the previous branches 
    sumbits_sbs0_sbs1_sbs0_rtlr: process (Clk) is
        begin
            if rising_edge(Clk) then
                sbs0_sbs1_lqu <= (sbs0_sbs1_sbs0_lqu + sbs0_sbs1_sbs0_lql);
            end if;
        end process sumbits_sbs0_sbs1_sbs0_rtlr;

    -- the result is the sum of the two (terminal) leaves 
    sumbits_sbs0_sbs1_sbs1_sbs0_rtl2: process (Clk) is
        begin
            if rising_edge(Clk) then
                sbs0_sbs1_sbs1_lqu <= (to_unsigned(sbs0_sbs1_sbs1_dupper(1), 2) + to_unsigned(sbs0_sbs1_sbs1_dupper(0), 2));
            end if;
        end process sumbits_sbs0_sbs1_sbs1_sbs0_rtl2;

    -- the result is the sum of the two (terminal) leaves 
    sumbits_sbs0_sbs1_sbs1_sbs1_rtl2: process (Clk) is
        begin
            if rising_edge(Clk) then
                sbs0_sbs1_sbs1_lql <= (to_unsigned(sbs0_sbs1_sbs1_dlower(1), 2) + to_unsigned(sbs0_sbs1_sbs1_dlower(0), 2));
            end if;
        end process sumbits_sbs0_sbs1_sbs1_sbs1_rtl2;

    -- this will expand on the left in case the input data-size is uneven 
    
    sbs0_sbs1_sbs1_dupper <= resize(sbs0_sbs1_dlower(3-1 downto 2), 2);
    sbs0_sbs1_sbs1_dlower <= sbs0_sbs1_dlower(2-1 downto 0);

    -- the result is the sum of the previous branches 
    sumbits_sbs0_sbs1_sbs1_rtlr: process (Clk) is
        begin
            if rising_edge(Clk) then
                sbs0_sbs1_lql <= (sbs0_sbs1_sbs1_lqu + sbs0_sbs1_sbs1_lql);
            end if;
        end process sumbits_sbs0_sbs1_sbs1_rtlr;

    -- this will expand on the left in case the input data-size is uneven 
    
    sbs0_sbs1_dupper <= resize(sbs0_dlower(5-1 downto 3), 3);
    sbs0_sbs1_dlower <= sbs0_dlower(3-1 downto 0);

    -- the result is the sum of the previous branches 
    sumbits_sbs0_sbs1_rtlr: process (Clk) is
        begin
            if rising_edge(Clk) then
                sbs0_lql <= (resize(sbs0_sbs1_lqu, 3) + sbs0_sbs1_lql);
            end if;
        end process sumbits_sbs0_sbs1_rtlr;

    -- this will expand on the left in case the input data-size is uneven 
    
    sbs0_dupper <= resize(dupper(9-1 downto 5), 5);
    sbs0_dlower <= dupper(5-1 downto 0);

    -- the result is the sum of the previous branches 
    sumbits_sbs0_rtlr: process (Clk) is
        begin
            if rising_edge(Clk) then
                lqu <= (resize(sbs0_lqu, 4) + sbs0_lql);
            end if;
        end process sumbits_sbs0_rtlr;

    -- the result is the sum of the two (terminal) leaves 
    sumbits_sbs1_sbs0_sbs0_sbs0_rtl2: process (Clk) is
        begin
            if rising_edge(Clk) then
                sbs1_sbs0_sbs0_lqu <= (to_unsigned(sbs1_sbs0_sbs0_dupper(1), 2) + to_unsigned(sbs1_sbs0_sbs0_dupper(0), 2));
            end if;
        end process sumbits_sbs1_sbs0_sbs0_sbs0_rtl2;

    -- the result is the sum of the two (terminal) leaves 
    sumbits_sbs1_sbs0_sbs0_sbs1_rtl2: process (Clk) is
        begin
            if rising_edge(Clk) then
                sbs1_sbs0_sbs0_lql <= (to_unsigned(sbs1_sbs0_sbs0_dlower(1), 2) + to_unsigned(sbs1_sbs0_sbs0_dlower(0), 2));
            end if;
        end process sumbits_sbs1_sbs0_sbs0_sbs1_rtl2;

    -- this will expand on the left in case the input data-size is uneven 
    
    sbs1_sbs0_sbs0_dupper <= resize(sbs1_sbs0_dupper(3-1 downto 2), 2);
    sbs1_sbs0_sbs0_dlower <= sbs1_sbs0_dupper(2-1 downto 0);

    -- the result is the sum of the previous branches 
    sumbits_sbs1_sbs0_sbs0_rtlr: process (Clk) is
        begin
            if rising_edge(Clk) then
                sbs1_sbs0_lqu <= (sbs1_sbs0_sbs0_lqu + sbs1_sbs0_sbs0_lql);
            end if;
        end process sumbits_sbs1_sbs0_sbs0_rtlr;

    -- the result is the sum of the two (terminal) leaves 
    sumbits_sbs1_sbs0_sbs1_sbs0_rtl2: process (Clk) is
        begin
            if rising_edge(Clk) then
                sbs1_sbs0_sbs1_lqu <= (to_unsigned(sbs1_sbs0_sbs1_dupper(1), 2) + to_unsigned(sbs1_sbs0_sbs1_dupper(0), 2));
            end if;
        end process sumbits_sbs1_sbs0_sbs1_sbs0_rtl2;

    -- the result is the sum of the two (terminal) leaves 
    sumbits_sbs1_sbs0_sbs1_sbs1_rtl2: process (Clk) is
        begin
            if rising_edge(Clk) then
                sbs1_sbs0_sbs1_lql <= (to_unsigned(sbs1_sbs0_sbs1_dlower(1), 2) + to_unsigned(sbs1_sbs0_sbs1_dlower(0), 2));
            end if;
        end process sumbits_sbs1_sbs0_sbs1_sbs1_rtl2;

    -- this will expand on the left in case the input data-size is uneven 
    
    sbs1_sbs0_sbs1_dupper <= resize(sbs1_sbs0_dlower(3-1 downto 2), 2);
    sbs1_sbs0_sbs1_dlower <= sbs1_sbs0_dlower(2-1 downto 0);

    -- the result is the sum of the previous branches 
    sumbits_sbs1_sbs0_sbs1_rtlr: process (Clk) is
        begin
            if rising_edge(Clk) then
                sbs1_sbs0_lql <= (sbs1_sbs0_sbs1_lqu + sbs1_sbs0_sbs1_lql);
            end if;
        end process sumbits_sbs1_sbs0_sbs1_rtlr;

    -- this will expand on the left in case the input data-size is uneven 
    
    sbs1_sbs0_dupper <= resize(sbs1_dupper(5-1 downto 3), 3);
    sbs1_sbs0_dlower <= sbs1_dupper(3-1 downto 0);

    -- the result is the sum of the previous branches 
    sumbits_sbs1_sbs0_rtlr: process (Clk) is
        begin
            if rising_edge(Clk) then
                sbs1_lqu <= (resize(sbs1_sbs0_lqu, 3) + sbs1_sbs0_lql);
            end if;
        end process sumbits_sbs1_sbs0_rtlr;

    -- the result is the sum of the two (terminal) leaves 
    sumbits_sbs1_sbs1_sbs0_sbs0_rtl2: process (Clk) is
        begin
            if rising_edge(Clk) then
                sbs1_sbs1_sbs0_lqu <= (to_unsigned(sbs1_sbs1_sbs0_dupper(1), 2) + to_unsigned(sbs1_sbs1_sbs0_dupper(0), 2));
            end if;
        end process sumbits_sbs1_sbs1_sbs0_sbs0_rtl2;

    -- the result is the sum of the two (terminal) leaves 
    sumbits_sbs1_sbs1_sbs0_sbs1_rtl2: process (Clk) is
        begin
            if rising_edge(Clk) then
                sbs1_sbs1_sbs0_lql <= (to_unsigned(sbs1_sbs1_sbs0_dlower(1), 2) + to_unsigned(sbs1_sbs1_sbs0_dlower(0), 2));
            end if;
        end process sumbits_sbs1_sbs1_sbs0_sbs1_rtl2;

    -- this will expand on the left in case the input data-size is uneven 
    
    sbs1_sbs1_sbs0_dupper <= resize(sbs1_sbs1_dupper(3-1 downto 2), 2);
    sbs1_sbs1_sbs0_dlower <= sbs1_sbs1_dupper(2-1 downto 0);

    -- the result is the sum of the previous branches 
    sumbits_sbs1_sbs1_sbs0_rtlr: process (Clk) is
        begin
            if rising_edge(Clk) then
                sbs1_sbs1_lqu <= (sbs1_sbs1_sbs0_lqu + sbs1_sbs1_sbs0_lql);
            end if;
        end process sumbits_sbs1_sbs1_sbs0_rtlr;

    -- the result is the sum of the two (terminal) leaves 
    sumbits_sbs1_sbs1_sbs1_sbs0_rtl2: process (Clk) is
        begin
            if rising_edge(Clk) then
                sbs1_sbs1_sbs1_lqu <= (to_unsigned(sbs1_sbs1_sbs1_dupper(1), 2) + to_unsigned(sbs1_sbs1_sbs1_dupper(0), 2));
            end if;
        end process sumbits_sbs1_sbs1_sbs1_sbs0_rtl2;

    -- the result is the sum of the two (terminal) leaves 
    sumbits_sbs1_sbs1_sbs1_sbs1_rtl2: process (Clk) is
        begin
            if rising_edge(Clk) then
                sbs1_sbs1_sbs1_lql <= (to_unsigned(sbs1_sbs1_sbs1_dlower(1), 2) + to_unsigned(sbs1_sbs1_sbs1_dlower(0), 2));
            end if;
        end process sumbits_sbs1_sbs1_sbs1_sbs1_rtl2;

    -- this will expand on the left in case the input data-size is uneven 
    
    sbs1_sbs1_sbs1_dupper <= resize(sbs1_sbs1_dlower(3-1 downto 2), 2);
    sbs1_sbs1_sbs1_dlower <= sbs1_sbs1_dlower(2-1 downto 0);

    -- the result is the sum of the previous branches 
    sumbits_sbs1_sbs1_sbs1_rtlr: process (Clk) is
        begin
            if rising_edge(Clk) then
                sbs1_sbs1_lql <= (sbs1_sbs1_sbs1_lqu + sbs1_sbs1_sbs1_lql);
            end if;
        end process sumbits_sbs1_sbs1_sbs1_rtlr;

    -- this will expand on the left in case the input data-size is uneven 
    
    sbs1_sbs1_dupper <= resize(sbs1_dlower(5-1 downto 3), 3);
    sbs1_sbs1_dlower <= sbs1_dlower(3-1 downto 0);

    -- the result is the sum of the previous branches 
    sumbits_sbs1_sbs1_rtlr: process (Clk) is
        begin
            if rising_edge(Clk) then
                sbs1_lql <= (resize(sbs1_sbs1_lqu, 3) + sbs1_sbs1_lql);
            end if;
        end process sumbits_sbs1_sbs1_rtlr;

    -- this will expand on the left in case the input data-size is uneven 
    
    sbs1_dupper <= resize(dlower(9-1 downto 5), 5);
    sbs1_dlower <= dlower(5-1 downto 0);

    -- the result is the sum of the previous branches 
    sumbits_sbs1_rtlr: process (Clk) is
        begin
            if rising_edge(Clk) then
                lql <= (resize(sbs1_lqu, 4) + sbs1_lql);
            end if;
        end process sumbits_sbs1_rtlr;

    -- this will expand on the left in case the input data-size is uneven 
    
    dupper <= resize(D(17-1 downto 9), 9);
    dlower <= D(9-1 downto 0);

    -- the result is the sum of the previous branches 
    sumbits_rtlr: process (Clk) is
        begin
            if rising_edge(Clk) then
                Q <= (resize(lqu, 5) + lql);
            end if;
        end process sumbits_rtlr;

    
end architecture MyHDL;
